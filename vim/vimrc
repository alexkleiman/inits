"
" ~/.vimrc
"
" This is your Vim initialization file. It is read on Vim startup.
"
" Change this file to customize your Vim settings.
"
" Vim treats lines beginning with " as comments.
"
" EXAMPLES are available in /usr/local/doc/startups.
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

"pathogen
execute pathogen#infect()

" turn on 256 colors
" set t_Co=256

"syntax highlighting
syntax enable

"solarized
set background=dark
"let g:solarized_termcolors=256
colorscheme solarized

"colorscheme
"colorscheme delek
"hi Comment ctermfg=darkgrey
"hi String ctermfg=red

" allow backspacing over everything in insert mode
set backspace=indent,eol,start


" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
"syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Have Vim load indentation rules according to the detected filetype. Per
" default Debian Vim only load filetype specific plugins.
if has("autocmd")
  filetype indent on
endif

" mappings

"jj = <Esc>
inoremap jj <Esc>

" leader as comma
let mapleader=","

" toggle cursor line highlighting
function! ToggleCursorLine()
    if &cursorline
        set nocursorline
    else
        set cursorline
    endif
endfunction

:nnoremap <Leader>; :call ToggleCursorLine() <CR>

" toggle relative linenumbers
function! ToggleRelativenumber()
    if &relativenumber
        set number
    else
        set relativenumber
    endif
endfunction

:nnoremap <Leader>r :call ToggleRelativenumber() <CR>

" jk = <Esc>:w<Return>
" inoremap jk <Esc>:w<Return>

noremap <leader>. gt
noremap <leader>m gT
noremap <leader>t :ConqueTermVSplit zsh<Return>

"switch between .c* and .h files in c/c++
"noremap <leader>a :A

set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching
set incsearch          " Incremental search
set autowrite          " Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned

"turn on filetype plugins
filetype plugin on

"relative line numbers
set relativenumber

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use spaces instead of tabs
set expandtab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" line and column number
set ruler

" Enable mouse use in all modes
set mouse=a

" Make sure mouse clicking always works
set ttymouse=xterm
"auto save
set autowrite

" show stuff?
set showcmd

"turn off error bells
set noerrorbells visualbell t_vb=
set noerrorbells

" emacs-style tab
set indentkeys=0{,0},0),:,0#,!^F,!<Tab>,o,O,e
set cinkeys=0{,0},0),:,0#,!^F,!<Tab>,o,O,e

" good tab completion
set wildmode=longest,full
set wildmenu

"always show the status line
set laststatus=2

"syntasic stuff
let g:syntastic_c_checkers = ['make']
"let g:syntastic_latex_checkers = ['make']
"let g:syntastic_disabled_filetypes = ['latex']

"syntastic for c++
"let g:syntatic_cpp_checkers = ['cpplint']
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_no_include_search = 1
"let g:syntastic_cpp_no_default_include_dirs = 1
"let g:syntastic_cpp_auto_refrech_includes = 1

" good tabbing for latex
let g:tex_flavor='latex'

function CopyLine(relnum)
    relnum<PageUp>
    yy
    relnum<PageDown>
    <PageUp>
    p
endfunction

set cc=101

" file specific things
autocmd BufNewFile,BufRead *.tex set textwidth=80
autocmd BufNewFile,BufRead *.txt set textwidth=80
autocmd BufNewFile,BufRead README set textwidth=80

"ycm
"backup conf file
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'
"turn off confirmation of conf file
let g:ycm_confirm_extra_conf = 0
"whitelist of filetypes for ycm
let g:ycm_filetype_whitelist = { '*': 1 }
" toggle diagnostics on/off
let g:ycm_show_diagnostics_ui = 0

"conque
let g:ConqueTerm_Color = 1
let g:ConqueTerm_TERM = 'xterm'
let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_CloseOnEnd = 1

"conqueGDB
let g:ConqueGdb_Leader = '\'

"airline
"turn off annoying whitespace detection
let g:airline#extensions#whitespace#enabled = 0

" enable fugitive integration
let g:airline#extensions#branch#enabled = 1

" enable syntastic integration
let g:airline#extensions#syntastic#enabled = 0

"tagbar
nmap <Leader>f :TagbarOpen<SPACE>j<CR>
nmap <Leader>q :TagbarClose<CR>
nmap <Leader>s :TagbarTogglePause<CR>
let g:tagbar_width = 63
"let g:tagbar_left = 1
let g:tagbar_autofocus = 1
"open tagbar when opening vim
"autocmd VimEnter * nested :call tagbar#autoopen(1)
"open tagbar when opening new tab
"autocmd BufEnter * nested :call tagbar#autoopen(0)

"CommandT
nnoremap <silent> <Leader>v :CommandT<CR>

"if &term =~ "xterm\\|rxvt"
      """ use an orange cursor in insert mode
      "let &t_SI = "\<Esc>]12;orange\x7"
      """use a red cursor otherwise
      "let &t_EI = "\<Esc>]12;darkgrey\x7"
      "silent !echo -ne "\033]12;darkgrey\007"
      """ reset cursor when vim exits
      "autocmd VimLeave * silent !echo -ne "\033]112\007"
      """ use \003]12;gray\007 for gnome-terminal
"endif
